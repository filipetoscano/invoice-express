using InvoiceXpress.CountryGen;
using RestSharp;
using System.Text;
using System.Text.Json;


/*
 * ISO-3166 list of countries
 */
List<Country> all;

if ( Environment.GetEnvironmentVariable( "IE_API" ) == "1" )
{
    var api = new RestClient( "https://restcountries.com/" ).UseJson();
    var req = new RestRequest( "/v3.1/all" );

    var resp = await api.GetAsync<List<Country>>( req );
    all = resp!;
}
else
{
    var json = await File.ReadAllTextAsync( "all.json" );
    all = JsonSerializer.Deserialize<List<Country>>( json! )!;
}


/*
 * Load HTML fragment from InvoiceXpress website, which is
 * the drop-down with the list of countries.
 */
var html = await File.ReadAllLinesAsync( "opt.html" );
var iec = new List<string>();

foreach ( var l in html )
{
    if ( l.StartsWith( "<option value=" ) == false )
        continue;

    var ix = l.IndexOf( '"', 15 );
    var country = l.Substring( 15, ix - 15 );

    iec.Add( country );
}


/*
 * InvoiceXpress receives the country as a string! Since names
 * of countries (sometimes) change (or their value differs from
 * the official country name) we need a remap!
 */
var map = new Dictionary<string, string>();

// Not available in Invoice Express: 
map.Add( "AQ", "##skip" );                       // Antarctica
map.Add( "AX", "##skip" );                       // Åland Islands
map.Add( "SS", "##skip" );                       // South Sudan

// Need remapping
map.Add( "BA", "Bosnia-Herzegovina" );           // Bosnia and Herzegovina
map.Add( "CD", "Congo" );                        // DR Congo
map.Add( "CZ", "Czech Republic" );               // Czechia
map.Add( "FO", "Faeroe Islands (Føroyar)" );     // Faeroe Islands
map.Add( "GB", "UK" );                           // United Kingdom
map.Add( "KP", "Korea, North" );                 // North Korea
map.Add( "KR", "Korea, South" );                 // South Korea
map.Add( "MK", "Macedonia (Former Yug. Rep.)" ); // North Macedonia
map.Add( "PN", "Pitcairn Island" );              // Pitcairn Islands
map.Add( "RE", "Reunion" );                      // Réunion
map.Add( "SN", "Sénégal" );                      // Senegal
map.Add( "SZ", "Swaziland" );                    // Eswatini
map.Add( "TO", "Togo" );                         // Tonga
map.Add( "VA", "Vatican" );                      // Vatican City
map.Add( "WF", "Wallis and Futuna Islands" );    // Wallis and Futuna
map.Add( "WS", "Western Samoa" );                // Samoa


/*
 * 
 */
var sb = new StringBuilder();

sb.AppendLine( @"// autogenerated
using InvoiceXpress.Json;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;

namespace InvoiceXpress;

/// <summary />
/// <remarks>
/// List of countries as per: https://invoicexpress.com/api-v2/documentation/appendix
/// </remarks>
[JsonConverter( typeof( EnumConverter ) )]
public enum Country
{" );

var fg = Console.ForegroundColor;
var issueCount = 0;

foreach ( var country in all!.OrderBy( x => x.Alpha2 ) )
{
    var ieName = country.Name.Common;

    /*
     * Exceptions!
     */
    if ( map.ContainsKey( country.Alpha2 ) == true )
    {
        ieName = map[ country.Alpha2 ];

        if ( ieName == "##skip" )
            continue;
    }

    if ( iec.Contains( ieName ) == false && ieName.StartsWith( "Saint" ) == true )
        ieName = ieName.Replace( "Saint ", "St. " );

    if ( iec.Contains( ieName ) == false )
    {
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine( "warn: issue with country {0} / {1}", country.Alpha2, country.Name.Common );
        Console.ForegroundColor = fg;

        issueCount++;
        continue;
    }


    sb.AppendLine( $"    /// <summary>" );
    sb.AppendLine( $"    /// { country.Alpha2 }, { country.Name.Common }" );
    sb.AppendLine( $"    /// </summary>" );
    sb.AppendLine( $"    [EnumMember( Value = \"{ ieName }\" )]" );
    sb.AppendLine( $"    { country.Alpha2 }," );
    sb.AppendLine();
}

sb.AppendLine( "}" );


/*
 * 
 */
if ( issueCount > 0 )
{
    Console.ForegroundColor = ConsoleColor.Red;
    Console.WriteLine( "err: {0} issues with country mapping", issueCount );
    Console.ForegroundColor = fg;

    // return 1;
}


if ( args.Length == 0 )
{
    Console.WriteLine( sb.ToString() );
}
else
{
    await File.WriteAllTextAsync( args[ 0 ], sb.ToString() );
}

return 0;

/* eof */
